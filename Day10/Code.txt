// Merge sort --> Divide and conquer

function sortedArr = mergeSort(arr)
    if length(arr) <= 1
        sortedArr = arr;
        return;
    end
    
    mid = floor(length(arr) / 2);
    leftHalf = mergeSort(arr(1:mid));
    rightHalf = mergeSort(arr(mid+1:end));
    
    sortedArr = merge(leftHalf, rightHalf);
end

function mergedArr = merge(leftArr, rightArr)
    mergedArr = [];
    i = 1; j = 1;
    
    while i <= length(leftArr) && j <= length(rightArr)
        if leftArr(i) < rightArr(j)
            mergedArr = [mergedArr, leftArr(i)];
            i = i + 1;
        else
            mergedArr = [mergedArr, rightArr(j)];
            j = j + 1;
        end
    end
    
    mergedArr = [mergedArr, leftArr(i:end), rightArr(j:end)];
end

arr = [8,3,5,1,7,2]; 
sortedArr = mergeSort(arr);
disp('Sorted array:');
disp(sortedArr);

...........................................................................................................................

// Quick Sort --> Partionary usinng pivot

function sortedArray = quickSort(array)
    if length(array) <= 1
        sortedArray = array;
        return;
    end
    pivot = array(1); 
    left = array(array < pivot); 
    right = array(array > pivot); 
    middle = array(array == pivot); 
    sortedArray = [quickSort(left), middle, quickSort(right)];
end

arr = [5,2,8,1,7];
sortedArr = quickSort(arr);
disp(sortedArr);

...........................................................................................................................

// Graph 01>

s = [1 2]; % start nodes
t = [2 3]; % end nodes
G = graph(s, t); % create a graph object
plot(G); % plot the graph
title('Graph'); % add a title

...........................................................................................................................

// Graph 02> Undirected graph

G = graph([1 2], [2 3]);
plot(G);
title('Undirected graph');

...........................................................................................................................

// Graph 03> Weighted undirected graph

s = [1 2 2]; 
t = [2 3 4];
weights = [10 5 7]; 
G = graph(s, t, weights); 
plot(G, 'EdgeLabel', G.Edge.Weight); 
title('Weighted Undirected Graph');

...........................................................................................................................

// Graph 02> Unweighted graph

G = graph([1 2 3], [2 3 4]);
plot(G);
title('Unweighted graph');